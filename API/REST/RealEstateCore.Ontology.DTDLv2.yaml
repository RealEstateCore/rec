openapi: 3.0.3
info:
  version: "4.0.0-preview"
  title: RealEstateCore Ontology (DTDLv2)
  license:
    name: BSD-3-Clause
  contact:
    name: RealEstateCore
    url: https://github.com/RealEstateCore/rec
  description: RealEstateCore (REC) is an ontology model and API specification for building and interfacing against Smart Buildings, whether on individual building or portfolio level. The REC ontology is released in DTDL (Digital Twin Definition Language) and SHACL (RDF Shapes Contraint language) formats; the REC API is expressed as an OpenAPI Specification (a.k.a. Swagger). We also provide a southbound edge API for bandwidth-constrained devices to communicate telemetry, alerts, commands, etc (see GitHub repository).
components:
  parameters:
    pageParam:
      name: page
      description: If the result set is large, pagination across the results can be employed; in that case, this parameter defines the page number (zero-indexed) that is requested by the client. The number of items included in each page is defined by the 'size' parameter. Default is 0, i.e., the first results page is returned.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      in: query
    sizeParam:
      name: size
      description: The number of items to display on a returned results page (see the page parameter).
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        default: 20
      in: query
    sortParam:
      name: sort
      description: The field and direction to sort results on.
      schema:
        $ref: '#/components/schemas/SortingSchema'
      style: deepObject
      in: query
  schemas:
    HydraCollectionWrapper:
      type: object
      required:
      - '@context'
      - '@type'
      - hydra:member
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@type':
          type: string
          default: hydra:Collection
        hydra:totalItems:
          type: integer
        hydra:view:
          type: object
          properties:
            '@id':
              type: string
              format: uri
            '@type':
              type: string
              default: hydra:PartialCollectionView
            hydra:first:
              type: string
            hydra:previous:
              type: string
            hydra:next:
              type: string
            hydra:last:
              type: string
    IntegerFilter:
      type: object
      properties:
        eq:
          type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
    NumberFilter:
      type: object
      properties:
        eq:
          type: number
        lt:
          type: number
        lte:
          type: number
        gt:
          type: number
        gte:
          type: number
    StringFilter:
      type: object
      properties:
        eq:
          type: string
        contains:
          type: string
        regex:
          type: string
    DateTimeFilter:
      type: object
      properties:
        eq:
          type: string
          format: date-time
        starting:
          type: string
          format: date-time
        ending:
          type: string
          format: date-time
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        latest:
          type: boolean
    SortingSchema:
      type: object
      properties:
        asc:
          type: string
        desc:
          type: string
    Point:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Point;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Point.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    Agent:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Agent;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Agent.jsonld
        isMemberOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Organization;1
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    Asset:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Asset;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Asset.jsonld
        commissionedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Asset;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        installedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        isPartOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Asset;1
        locatedIn:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        manufacturedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        mountedOn:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:BuildingElement;1
        servicedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        IPAddress:
          type: string
        MACAddress:
          type: string
        assetTag:
          type: string
        commissioningDate:
          type: string
          format: date
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        initialCost:
          type: string
        installationDate:
          type: string
          format: date
        maintenanceInterval:
          type: string
        modelNumber:
          type: string
        name:
          type: string
        serialNumber:
          type: string
        turnoverDate:
          type: string
          format: date
        weight:
          type: string
    BuildingElement:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:BuildingElement;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/BuildingElement.jsonld
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:BuildingElement;1
        locatedIn:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Architecture;1
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    Collection:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Collection;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Collection.jsonld
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    Event:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Event;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Event.jsonld
        customTags:
          type: string
        end:
          type: string
          format: date-time
        externalIds:
          type: string
        name:
          type: string
        start:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time
    Information:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Information;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Information.jsonld
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    Space:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Space;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Space.jsonld
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        georeference:
          $ref: '#/components/schemas/Georeference'
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    Alarm:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Alarm;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Alarm.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        lastKnownValue:
          type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    Command:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Command;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Command.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        lastKnownValue:
          type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    Parameter:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Parameter;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Parameter.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        lastKnownValue:
          type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    Sensor:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Sensor;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Sensor.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    Setpoint:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Setpoint;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Setpoint.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        lastKnownValue:
          type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    Status:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Status;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Status.jsonld
        isPointOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        lastKnownValue:
          type: string
        aggregate:
          type: string
        customTags:
          type: string
        externalIds:
          type: string
        hasQuantity:
          type: string
        hasSubstance:
          type: string
        name:
          type: string
    ActuationEvent:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ActuationEvent;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ActuationEvent.jsonld
        targetPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        payload:
          type: string
        customTags:
          type: string
        end:
          type: string
          format: date-time
        externalIds:
          type: string
        name:
          type: string
        start:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time
    ExceptionEvent:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ExceptionEvent;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ExceptionEvent.jsonld
        sourcePoint:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:brickschema:schema:Brick:Point;1
        payload:
          type: string
        customTags:
          type: string
        end:
          type: string
          format: date-time
        externalIds:
          type: string
        name:
          type: string
        start:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time
    ObservationEvent:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ObservationEvent;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ObservationEvent.jsonld
        sourcePoint:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:brickschema:schema:Brick:Point;1
        payload:
          type: string
        customTags:
          type: string
        end:
          type: string
          format: date-time
        externalIds:
          type: string
        name:
          type: string
        start:
          type: string
          format: date-time
        timestamp:
          type: string
          format: date-time
    Document:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Document;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Document.jsonld
        documentTopic:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        url:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    Site:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Site;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Site.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        georeference:
          $ref: '#/components/schemas/Georeference'
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    SubBuilding:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:SubBuilding;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/SubBuilding.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        georeference:
          $ref: '#/components/schemas/Georeference'
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    Building:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Building;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Building.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        georeference:
          $ref: '#/components/schemas/Georeference'
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    Level:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Level;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Level.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        georeference:
          $ref: '#/components/schemas/Georeference'
        levelNumber:
          type: integer
          format: int32
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    Room:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Room;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Room.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        georeference:
          $ref: '#/components/schemas/Georeference'
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    Zone:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Zone;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Zone.jsonld
        address:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:PostalAddress;1
        adjacentElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        architectedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        constructedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        containsElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        documentation:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Document;1
        hasPoint:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:brickschema:schema:Brick:Point;1
        intersectingElement:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:BuildingElement;1
        isFedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        operatedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        ownedBy:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Agent;1
        hasPart:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
                default: dtmi:org:w3id:rec:Space;1
        isLocationOf:
          type: array
          items:
            type: object
            required:
            - '@id'
            properties:
              '@id':
                type: string
              '@type':
                type: string
        isPartOf:
          type: object
          required:
          - '@id'
          properties:
            '@id':
              type: string
            '@type':
              type: string
              default: dtmi:org:w3id:rec:Space;1
        area:
          $ref: '#/components/schemas/ArchitectureArea'
        capacity:
          $ref: '#/components/schemas/ArchitectureCapacity'
        georeference:
          $ref: '#/components/schemas/Georeference'
        customTags:
          type: string
        externalIds:
          type: string
        geometry:
          type: string
        name:
          type: string
    Georeference:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Georeference;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/Georeference.jsonld
        alt:
          type: number
          format: float
        bearing:
          type: number
          format: float
        lat:
          type: number
          format: float
        long:
          type: number
          format: float
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    ArchitectureArea:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ArchitectureArea;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ArchitectureArea.jsonld
        grossArea:
          type: number
          format: float
        netArea:
          type: number
          format: float
        rentableArea:
          type: number
          format: float
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    ArchitectureCapacity:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:ArchitectureCapacity;1
        '@context':
          type: string
          default: https://dev.realestatecore.io/contexts/ArchitectureCapacity.jsonld
        maxOccupancy:
          type: integer
          format: int32
        seatingCapacity:
          type: integer
          format: int32
        customTags:
          type: string
        externalIds:
          type: string
        name:
          type: string
    Context:
      type: object
      required:
      - '@vocab'
      - '@base'
      - hydra
      properties:
        '@base':
          type: string
          format: uri
        hydra:
          type: string
          format: uri
          default: http://www.w3.org/ns/hydra/core#
paths:
  /points:
    get:
      summary: Get 'Point' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Point' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Point'
      tags:
      - points
    post:
      summary: Create a new 'Point' object.
      parameters: []
      requestBody:
        description: New 'Point' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Point'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Point'
      tags:
      - points
  /points/{id}:
    get:
      summary: Get a specific 'Point' object.
      parameters:
      - name: id
        description: Id of 'Point' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Point' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Point'
      tags:
      - points
    put:
      summary: Update an existing 'Point' entity.
      parameters:
      - name: id
        description: Id of 'Point' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Point' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Point'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Point'
      tags:
      - points
    patch:
      summary: Update a single property on a specific 'Point' object.
      parameters:
      - name: id
        description: Id of 'Point' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Point'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Point'
      tags:
      - points
    delete:
      summary: Delete a 'Point' object.
      parameters:
      - name: id
        description: Id of 'Point' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Point' entity was successfully deleted."
      tags:
      - points
  /alarms:
    get:
      summary: Get 'Alarm' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: lastKnownValue
        description: Filter value on property 'lastKnownValue'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Alarm' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Alarm'
      tags:
      - alarms
    post:
      summary: Create a new 'Alarm' object.
      parameters: []
      requestBody:
        description: New 'Alarm' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Alarm'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Alarm'
      tags:
      - alarms
  /alarms/{id}:
    get:
      summary: Get a specific 'Alarm' object.
      parameters:
      - name: id
        description: Id of 'Alarm' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Alarm' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Alarm' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Alarm'
      tags:
      - alarms
    put:
      summary: Update an existing 'Alarm' entity.
      parameters:
      - name: id
        description: Id of 'Alarm' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Alarm' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Alarm'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Alarm' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Alarm'
      tags:
      - alarms
    patch:
      summary: Update a single property on a specific 'Alarm' object.
      parameters:
      - name: id
        description: Id of 'Alarm' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Alarm'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Alarm' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Alarm'
      tags:
      - alarms
    delete:
      summary: Delete a 'Alarm' object.
      parameters:
      - name: id
        description: Id of 'Alarm' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Alarm' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Alarm' entity was successfully deleted."
      tags:
      - alarms
  /commands:
    get:
      summary: Get 'Command' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: lastKnownValue
        description: Filter value on property 'lastKnownValue'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Command' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Command'
      tags:
      - commands
    post:
      summary: Create a new 'Command' object.
      parameters: []
      requestBody:
        description: New 'Command' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Command'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Command'
      tags:
      - commands
  /commands/{id}:
    get:
      summary: Get a specific 'Command' object.
      parameters:
      - name: id
        description: Id of 'Command' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Command' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Command' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Command'
      tags:
      - commands
    put:
      summary: Update an existing 'Command' entity.
      parameters:
      - name: id
        description: Id of 'Command' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Command' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Command'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Command' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Command'
      tags:
      - commands
    patch:
      summary: Update a single property on a specific 'Command' object.
      parameters:
      - name: id
        description: Id of 'Command' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Command'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Command' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Command'
      tags:
      - commands
    delete:
      summary: Delete a 'Command' object.
      parameters:
      - name: id
        description: Id of 'Command' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Command' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Command' entity was successfully deleted."
      tags:
      - commands
  /parameters:
    get:
      summary: Get 'Parameter' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: lastKnownValue
        description: Filter value on property 'lastKnownValue'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Parameter' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Parameter'
      tags:
      - parameters
    post:
      summary: Create a new 'Parameter' object.
      parameters: []
      requestBody:
        description: New 'Parameter' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Parameter'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Parameter'
      tags:
      - parameters
  /parameters/{id}:
    get:
      summary: Get a specific 'Parameter' object.
      parameters:
      - name: id
        description: Id of 'Parameter' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Parameter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Parameter' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Parameter'
      tags:
      - parameters
    put:
      summary: Update an existing 'Parameter' entity.
      parameters:
      - name: id
        description: Id of 'Parameter' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Parameter' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Parameter'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Parameter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Parameter'
      tags:
      - parameters
    patch:
      summary: Update a single property on a specific 'Parameter' object.
      parameters:
      - name: id
        description: Id of 'Parameter' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Parameter'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Parameter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Parameter'
      tags:
      - parameters
    delete:
      summary: Delete a 'Parameter' object.
      parameters:
      - name: id
        description: Id of 'Parameter' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Parameter' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Parameter' entity was successfully deleted."
      tags:
      - parameters
  /sensors:
    get:
      summary: Get 'Sensor' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Sensor' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    post:
      summary: Create a new 'Sensor' object.
      parameters: []
      requestBody:
        description: New 'Sensor' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Sensor'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
  /sensors/{id}:
    get:
      summary: Get a specific 'Sensor' object.
      parameters:
      - name: id
        description: Id of 'Sensor' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Sensor' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    put:
      summary: Update an existing 'Sensor' entity.
      parameters:
      - name: id
        description: Id of 'Sensor' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Sensor' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Sensor'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    patch:
      summary: Update a single property on a specific 'Sensor' object.
      parameters:
      - name: id
        description: Id of 'Sensor' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Sensor'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Sensor'
      tags:
      - sensors
    delete:
      summary: Delete a 'Sensor' object.
      parameters:
      - name: id
        description: Id of 'Sensor' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Sensor' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Sensor' entity was successfully deleted."
      tags:
      - sensors
  /setpoints:
    get:
      summary: Get 'Setpoint' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: lastKnownValue
        description: Filter value on property 'lastKnownValue'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Setpoint' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Setpoint'
      tags:
      - setpoints
    post:
      summary: Create a new 'Setpoint' object.
      parameters: []
      requestBody:
        description: New 'Setpoint' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Setpoint'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Setpoint'
      tags:
      - setpoints
  /setpoints/{id}:
    get:
      summary: Get a specific 'Setpoint' object.
      parameters:
      - name: id
        description: Id of 'Setpoint' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Setpoint' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Setpoint' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Setpoint'
      tags:
      - setpoints
    put:
      summary: Update an existing 'Setpoint' entity.
      parameters:
      - name: id
        description: Id of 'Setpoint' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Setpoint' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Setpoint'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Setpoint' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Setpoint'
      tags:
      - setpoints
    patch:
      summary: Update a single property on a specific 'Setpoint' object.
      parameters:
      - name: id
        description: Id of 'Setpoint' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Setpoint'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Setpoint' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Setpoint'
      tags:
      - setpoints
    delete:
      summary: Delete a 'Setpoint' object.
      parameters:
      - name: id
        description: Id of 'Setpoint' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Setpoint' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Setpoint' entity was successfully deleted."
      tags:
      - setpoints
  /statuspoints:
    get:
      summary: Get 'Status' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isPointOf
        description: Filter value on relationship 'isPointOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: lastKnownValue
        description: Filter value on property 'lastKnownValue'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: aggregate
        description: Filter value on property 'aggregate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasQuantity
        description: Filter value on property 'hasQuantity'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: hasSubstance
        description: Filter value on property 'hasSubstance'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Status' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Status'
      tags:
      - statuspoints
    post:
      summary: Create a new 'Status' object.
      parameters: []
      requestBody:
        description: New 'Status' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Status'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Status'
      tags:
      - statuspoints
  /statuspoints/{id}:
    get:
      summary: Get a specific 'Status' object.
      parameters:
      - name: id
        description: Id of 'Status' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Status' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Status' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Status'
      tags:
      - statuspoints
    put:
      summary: Update an existing 'Status' entity.
      parameters:
      - name: id
        description: Id of 'Status' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Status' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Status'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Status' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Status'
      tags:
      - statuspoints
    patch:
      summary: Update a single property on a specific 'Status' object.
      parameters:
      - name: id
        description: Id of 'Status' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Status'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Status' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Status'
      tags:
      - statuspoints
    delete:
      summary: Delete a 'Status' object.
      parameters:
      - name: id
        description: Id of 'Status' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Status' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Status' entity was successfully deleted."
      tags:
      - statuspoints
  /agents:
    get:
      summary: Get 'Agent' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: isMemberOf
        description: Filter value on relationship 'isMemberOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Agent' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Agent'
      tags:
      - agents
    post:
      summary: Create a new 'Agent' object.
      parameters: []
      requestBody:
        description: New 'Agent' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Agent'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Agent'
      tags:
      - agents
  /agents/{id}:
    get:
      summary: Get a specific 'Agent' object.
      parameters:
      - name: id
        description: Id of 'Agent' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Agent' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Agent'
      tags:
      - agents
    put:
      summary: Update an existing 'Agent' entity.
      parameters:
      - name: id
        description: Id of 'Agent' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Agent' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Agent'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Agent'
      tags:
      - agents
    patch:
      summary: Update a single property on a specific 'Agent' object.
      parameters:
      - name: id
        description: Id of 'Agent' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Agent'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Agent'
      tags:
      - agents
    delete:
      summary: Delete a 'Agent' object.
      parameters:
      - name: id
        description: Id of 'Agent' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Agent' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Agent' entity was successfully deleted."
      tags:
      - agents
  /assets:
    get:
      summary: Get 'Asset' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: commissionedBy
        description: Filter value on relationship 'commissionedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: installedBy
        description: Filter value on relationship 'installedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: locatedIn
        description: Filter value on relationship 'locatedIn'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: manufacturedBy
        description: Filter value on relationship 'manufacturedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: mountedOn
        description: Filter value on relationship 'mountedOn'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: servicedBy
        description: Filter value on relationship 'servicedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: IPAddress
        description: Filter value on property 'IPAddress'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: MACAddress
        description: Filter value on property 'MACAddress'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: assetTag
        description: Filter value on property 'assetTag'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: commissioningDate
        description: Filter value on property 'commissioningDate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: initialCost
        description: Filter value on property 'initialCost'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: installationDate
        description: Filter value on property 'installationDate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: maintenanceInterval
        description: Filter value on property 'maintenanceInterval'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: modelNumber
        description: Filter value on property 'modelNumber'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: serialNumber
        description: Filter value on property 'serialNumber'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: turnoverDate
        description: Filter value on property 'turnoverDate'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: weight
        description: Filter value on property 'weight'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Asset' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Asset'
      tags:
      - assets
    post:
      summary: Create a new 'Asset' object.
      parameters: []
      requestBody:
        description: New 'Asset' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Asset'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Asset'
      tags:
      - assets
  /assets/{id}:
    get:
      summary: Get a specific 'Asset' object.
      parameters:
      - name: id
        description: Id of 'Asset' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Asset' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Asset' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Asset'
      tags:
      - assets
    put:
      summary: Update an existing 'Asset' entity.
      parameters:
      - name: id
        description: Id of 'Asset' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Asset' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Asset'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Asset' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Asset'
      tags:
      - assets
    patch:
      summary: Update a single property on a specific 'Asset' object.
      parameters:
      - name: id
        description: Id of 'Asset' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Asset'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Asset' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Asset'
      tags:
      - assets
    delete:
      summary: Delete a 'Asset' object.
      parameters:
      - name: id
        description: Id of 'Asset' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Asset' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Asset' entity was successfully deleted."
      tags:
      - assets
  /buildings:
    get:
      summary: Get 'Building' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Building' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    post:
      summary: Create a new 'Building' object.
      parameters: []
      requestBody:
        description: New 'Building' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Building'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
  /buildings/{id}:
    get:
      summary: Get a specific 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Building' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    put:
      summary: Update an existing 'Building' entity.
      parameters:
      - name: id
        description: Id of 'Building' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Building' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Building'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    patch:
      summary: Update a single property on a specific 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Building'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Building'
      tags:
      - buildings
    delete:
      summary: Delete a 'Building' object.
      parameters:
      - name: id
        description: Id of 'Building' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Building' entity was successfully deleted."
      tags:
      - buildings
  /buildingelements:
    get:
      summary: Get 'Building element' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: locatedIn
        description: Filter value on relationship 'locatedIn'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Building element' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/BuildingElement'
      tags:
      - buildingelements
    post:
      summary: Create a new 'Building element' object.
      parameters: []
      requestBody:
        description: New 'Building element' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/BuildingElement'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingElement'
      tags:
      - buildingelements
  /buildingelements/{id}:
    get:
      summary: Get a specific 'Building element' object.
      parameters:
      - name: id
        description: Id of 'Building element' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building element' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Building element' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingElement'
      tags:
      - buildingelements
    put:
      summary: Update an existing 'Building element' entity.
      parameters:
      - name: id
        description: Id of 'Building element' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Building element' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/BuildingElement'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building element' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingElement'
      tags:
      - buildingelements
    patch:
      summary: Update a single property on a specific 'Building element' object.
      parameters:
      - name: id
        description: Id of 'Building element' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/BuildingElement'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Building element' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/BuildingElement'
      tags:
      - buildingelements
    delete:
      summary: Delete a 'Building element' object.
      parameters:
      - name: id
        description: Id of 'Building element' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Building element' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Building element' entity was successfully deleted."
      tags:
      - buildingelements
  /collections:
    get:
      summary: Get 'Collection' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Collection' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Collection'
      tags:
      - collections
    post:
      summary: Create a new 'Collection' object.
      parameters: []
      requestBody:
        description: New 'Collection' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Collection'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Collection'
      tags:
      - collections
  /collections/{id}:
    get:
      summary: Get a specific 'Collection' object.
      parameters:
      - name: id
        description: Id of 'Collection' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Collection' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Collection' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Collection'
      tags:
      - collections
    put:
      summary: Update an existing 'Collection' entity.
      parameters:
      - name: id
        description: Id of 'Collection' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Collection' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Collection'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Collection' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Collection'
      tags:
      - collections
    patch:
      summary: Update a single property on a specific 'Collection' object.
      parameters:
      - name: id
        description: Id of 'Collection' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Collection'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Collection' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Collection'
      tags:
      - collections
    delete:
      summary: Delete a 'Collection' object.
      parameters:
      - name: id
        description: Id of 'Collection' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Collection' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Collection' entity was successfully deleted."
      tags:
      - collections
  /events:
    get:
      summary: Get 'Event' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: end
        description: Filter value on property 'end'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: start
        description: Filter value on property 'start'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: timestamp
        description: Filter value on property 'timestamp'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Event' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Event'
      tags:
      - events
    post:
      summary: Create a new 'Event' object.
      parameters: []
      requestBody:
        description: New 'Event' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Event'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - events
  /events/{id}:
    get:
      summary: Get a specific 'Event' object.
      parameters:
      - name: id
        description: Id of 'Event' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Event' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - events
    put:
      summary: Update an existing 'Event' entity.
      parameters:
      - name: id
        description: Id of 'Event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Event' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Event'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - events
    patch:
      summary: Update a single property on a specific 'Event' object.
      parameters:
      - name: id
        description: Id of 'Event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Event'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Event'
      tags:
      - events
    delete:
      summary: Delete a 'Event' object.
      parameters:
      - name: id
        description: Id of 'Event' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Event' entity was successfully deleted."
      tags:
      - events
  /observations:
    get:
      summary: Get 'Observation event' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: sourcePoint
        description: Filter value on relationship 'sourcePoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: payload
        description: Filter value on property 'payload'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: end
        description: Filter value on property 'end'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: start
        description: Filter value on property 'start'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: timestamp
        description: Filter value on property 'timestamp'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Observation event' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/ObservationEvent'
      tags:
      - observations
    post:
      summary: Create a new 'Observation event' object.
      parameters: []
      requestBody:
        description: New 'Observation event' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ObservationEvent'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ObservationEvent'
      tags:
      - observations
  /observations/{id}:
    get:
      summary: Get a specific 'Observation event' object.
      parameters:
      - name: id
        description: Id of 'Observation event' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Observation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Observation event' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ObservationEvent'
      tags:
      - observations
    put:
      summary: Update an existing 'Observation event' entity.
      parameters:
      - name: id
        description: Id of 'Observation event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Observation event' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ObservationEvent'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Observation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ObservationEvent'
      tags:
      - observations
    patch:
      summary: Update a single property on a specific 'Observation event' object.
      parameters:
      - name: id
        description: Id of 'Observation event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ObservationEvent'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Observation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ObservationEvent'
      tags:
      - observations
    delete:
      summary: Delete a 'Observation event' object.
      parameters:
      - name: id
        description: Id of 'Observation event' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Observation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Observation event' entity was successfully deleted."
      tags:
      - observations
  /actuations:
    get:
      summary: Get 'Actuation event' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: targetPoint
        description: Filter value on relationship 'targetPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: payload
        description: Filter value on property 'payload'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: end
        description: Filter value on property 'end'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: start
        description: Filter value on property 'start'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: timestamp
        description: Filter value on property 'timestamp'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Actuation event' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/ActuationEvent'
      tags:
      - actuations
    post:
      summary: Create a new 'Actuation event' object.
      parameters: []
      requestBody:
        description: New 'Actuation event' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ActuationEvent'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ActuationEvent'
      tags:
      - actuations
  /actuations/{id}:
    get:
      summary: Get a specific 'Actuation event' object.
      parameters:
      - name: id
        description: Id of 'Actuation event' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Actuation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Actuation event' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ActuationEvent'
      tags:
      - actuations
    put:
      summary: Update an existing 'Actuation event' entity.
      parameters:
      - name: id
        description: Id of 'Actuation event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Actuation event' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ActuationEvent'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Actuation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ActuationEvent'
      tags:
      - actuations
    patch:
      summary: Update a single property on a specific 'Actuation event' object.
      parameters:
      - name: id
        description: Id of 'Actuation event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ActuationEvent'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Actuation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ActuationEvent'
      tags:
      - actuations
    delete:
      summary: Delete a 'Actuation event' object.
      parameters:
      - name: id
        description: Id of 'Actuation event' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Actuation event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Actuation event' entity was successfully deleted."
      tags:
      - actuations
  /exceptions:
    get:
      summary: Get 'Exception event' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: sourcePoint
        description: Filter value on relationship 'sourcePoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: payload
        description: Filter value on property 'payload'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: end
        description: Filter value on property 'end'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: start
        description: Filter value on property 'start'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      - name: timestamp
        description: Filter value on property 'timestamp'.
        schema:
          $ref: '#/components/schemas/DateTimeFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Exception event' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/ExceptionEvent'
      tags:
      - exceptions
    post:
      summary: Create a new 'Exception event' object.
      parameters: []
      requestBody:
        description: New 'Exception event' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ExceptionEvent'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ExceptionEvent'
      tags:
      - exceptions
  /exceptions/{id}:
    get:
      summary: Get a specific 'Exception event' object.
      parameters:
      - name: id
        description: Id of 'Exception event' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Exception event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Exception event' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ExceptionEvent'
      tags:
      - exceptions
    put:
      summary: Update an existing 'Exception event' entity.
      parameters:
      - name: id
        description: Id of 'Exception event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Exception event' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ExceptionEvent'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Exception event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ExceptionEvent'
      tags:
      - exceptions
    patch:
      summary: Update a single property on a specific 'Exception event' object.
      parameters:
      - name: id
        description: Id of 'Exception event' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/ExceptionEvent'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Exception event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/ExceptionEvent'
      tags:
      - exceptions
    delete:
      summary: Delete a 'Exception event' object.
      parameters:
      - name: id
        description: Id of 'Exception event' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Exception event' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Exception event' entity was successfully deleted."
      tags:
      - exceptions
  /information:
    get:
      summary: Get 'Information' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Information' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Information'
      tags:
      - information
    post:
      summary: Create a new 'Information' object.
      parameters: []
      requestBody:
        description: New 'Information' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Information'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Information'
      tags:
      - information
  /information/{id}:
    get:
      summary: Get a specific 'Information' object.
      parameters:
      - name: id
        description: Id of 'Information' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Information' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Information'
      tags:
      - information
    put:
      summary: Update an existing 'Information' entity.
      parameters:
      - name: id
        description: Id of 'Information' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Information' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Information'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Information'
      tags:
      - information
    patch:
      summary: Update a single property on a specific 'Information' object.
      parameters:
      - name: id
        description: Id of 'Information' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Information'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Information'
      tags:
      - information
    delete:
      summary: Delete a 'Information' object.
      parameters:
      - name: id
        description: Id of 'Information' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Information' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Information' entity was successfully deleted."
      tags:
      - information
  /spaces:
    get:
      summary: Get 'Space' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Space' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Space'
      tags:
      - spaces
    post:
      summary: Create a new 'Space' object.
      parameters: []
      requestBody:
        description: New 'Space' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Space'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Space'
      tags:
      - spaces
  /spaces/{id}:
    get:
      summary: Get a specific 'Space' object.
      parameters:
      - name: id
        description: Id of 'Space' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Space' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Space' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Space'
      tags:
      - spaces
    put:
      summary: Update an existing 'Space' entity.
      parameters:
      - name: id
        description: Id of 'Space' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Space' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Space'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Space' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Space'
      tags:
      - spaces
    patch:
      summary: Update a single property on a specific 'Space' object.
      parameters:
      - name: id
        description: Id of 'Space' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Space'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Space' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Space'
      tags:
      - spaces
    delete:
      summary: Delete a 'Space' object.
      parameters:
      - name: id
        description: Id of 'Space' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Space' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Space' entity was successfully deleted."
      tags:
      - spaces
  /documents:
    get:
      summary: Get 'Document' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: documentTopic
        description: Filter value on relationship 'documentTopic'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: url
        description: Filter value on relationship 'url'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Document' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Document'
      tags:
      - documents
    post:
      summary: Create a new 'Document' object.
      parameters: []
      requestBody:
        description: New 'Document' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Document'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Document'
      tags:
      - documents
  /documents/{id}:
    get:
      summary: Get a specific 'Document' object.
      parameters:
      - name: id
        description: Id of 'Document' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Document' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Document' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Document'
      tags:
      - documents
    put:
      summary: Update an existing 'Document' entity.
      parameters:
      - name: id
        description: Id of 'Document' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Document' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Document'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Document' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Document'
      tags:
      - documents
    patch:
      summary: Update a single property on a specific 'Document' object.
      parameters:
      - name: id
        description: Id of 'Document' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Document'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Document' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Document'
      tags:
      - documents
    delete:
      summary: Delete a 'Document' object.
      parameters:
      - name: id
        description: Id of 'Document' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Document' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Document' entity was successfully deleted."
      tags:
      - documents
  /levels:
    get:
      summary: Get 'Level' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: levelNumber
        description: Filter value on property 'levelNumber'.
        schema:
          $ref: '#/components/schemas/IntegerFilter'
        style: deepObject
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Level' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Level'
      tags:
      - levels
    post:
      summary: Create a new 'Level' object.
      parameters: []
      requestBody:
        description: New 'Level' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Level'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Level'
      tags:
      - levels
  /levels/{id}:
    get:
      summary: Get a specific 'Level' object.
      parameters:
      - name: id
        description: Id of 'Level' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Level' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Level' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Level'
      tags:
      - levels
    put:
      summary: Update an existing 'Level' entity.
      parameters:
      - name: id
        description: Id of 'Level' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Level' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Level'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Level' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Level'
      tags:
      - levels
    patch:
      summary: Update a single property on a specific 'Level' object.
      parameters:
      - name: id
        description: Id of 'Level' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Level'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Level' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Level'
      tags:
      - levels
    delete:
      summary: Delete a 'Level' object.
      parameters:
      - name: id
        description: Id of 'Level' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Level' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Level' entity was successfully deleted."
      tags:
      - levels
  /sites:
    get:
      summary: Get 'Site' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Site' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Site'
      tags:
      - sites
    post:
      summary: Create a new 'Site' object.
      parameters: []
      requestBody:
        description: New 'Site' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Site'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Site'
      tags:
      - sites
  /sites/{id}:
    get:
      summary: Get a specific 'Site' object.
      parameters:
      - name: id
        description: Id of 'Site' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Site' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Site' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Site'
      tags:
      - sites
    put:
      summary: Update an existing 'Site' entity.
      parameters:
      - name: id
        description: Id of 'Site' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Site' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Site'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Site' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Site'
      tags:
      - sites
    patch:
      summary: Update a single property on a specific 'Site' object.
      parameters:
      - name: id
        description: Id of 'Site' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Site'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Site' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Site'
      tags:
      - sites
    delete:
      summary: Delete a 'Site' object.
      parameters:
      - name: id
        description: Id of 'Site' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Site' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Site' entity was successfully deleted."
      tags:
      - sites
  /subbuildings:
    get:
      summary: Get 'Sub-building' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Sub-building' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/SubBuilding'
      tags:
      - subbuildings
    post:
      summary: Create a new 'Sub-building' object.
      parameters: []
      requestBody:
        description: New 'Sub-building' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/SubBuilding'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/SubBuilding'
      tags:
      - subbuildings
  /subbuildings/{id}:
    get:
      summary: Get a specific 'Sub-building' object.
      parameters:
      - name: id
        description: Id of 'Sub-building' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Sub-building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Sub-building' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/SubBuilding'
      tags:
      - subbuildings
    put:
      summary: Update an existing 'Sub-building' entity.
      parameters:
      - name: id
        description: Id of 'Sub-building' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Sub-building' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/SubBuilding'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Sub-building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/SubBuilding'
      tags:
      - subbuildings
    patch:
      summary: Update a single property on a specific 'Sub-building' object.
      parameters:
      - name: id
        description: Id of 'Sub-building' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/SubBuilding'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Sub-building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/SubBuilding'
      tags:
      - subbuildings
    delete:
      summary: Delete a 'Sub-building' object.
      parameters:
      - name: id
        description: Id of 'Sub-building' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Sub-building' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Sub-building' entity was successfully deleted."
      tags:
      - subbuildings
  /rooms:
    get:
      summary: Get 'Room' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Room' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Room'
      tags:
      - rooms
    post:
      summary: Create a new 'Room' object.
      parameters: []
      requestBody:
        description: New 'Room' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Room'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - rooms
  /rooms/{id}:
    get:
      summary: Get a specific 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Room' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - rooms
    put:
      summary: Update an existing 'Room' entity.
      parameters:
      - name: id
        description: Id of 'Room' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Room' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Room'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - rooms
    patch:
      summary: Update a single property on a specific 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Room'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Room'
      tags:
      - rooms
    delete:
      summary: Delete a 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Room' entity was successfully deleted."
      tags:
      - rooms
  /zones:
    get:
      summary: Get 'Zone' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      - name: address
        description: Filter value on relationship 'address'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: adjacentElement
        description: Filter value on relationship 'adjacentElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: architectedBy
        description: Filter value on relationship 'architectedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: constructedBy
        description: Filter value on relationship 'constructedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: containsElement
        description: Filter value on relationship 'containsElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: documentation
        description: Filter value on relationship 'documentation'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPoint
        description: Filter value on relationship 'hasPoint'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: intersectingElement
        description: Filter value on relationship 'intersectingElement'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isFedBy
        description: Filter value on relationship 'isFedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: operatedBy
        description: Filter value on relationship 'operatedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: ownedBy
        description: Filter value on relationship 'ownedBy'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: hasPart
        description: Filter value on relationship 'hasPart'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isLocationOf
        description: Filter value on relationship 'isLocationOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: isPartOf
        description: Filter value on relationship 'isPartOf'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        in: query
      - name: customTags
        description: Filter value on property 'customTags'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: externalIds
        description: Filter value on property 'externalIds'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: geometry
        description: Filter value on property 'geometry'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      - name: name
        description: Filter value on property 'name'.
        schema:
          $ref: '#/components/schemas/StringFilter'
        style: deepObject
        in: query
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Zone' objects.
          content:
            application/ld+json:
              schema:
                allOf:
                - $ref: '#/components/schemas/HydraCollectionWrapper'
                - type: object
                  properties:
                    hydra:member:
                      type: array
                      items:
                        allOf:
                        - type: object
                          required:
                          - '@context'
                          properties:
                            '@context':
                              $ref: '#/components/schemas/Context'
                        - $ref: '#/components/schemas/Zone'
      tags:
      - zones
    post:
      summary: Create a new 'Zone' object.
      parameters: []
      requestBody:
        description: New 'Zone' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Zone'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Zone'
      tags:
      - zones
  /zones/{id}:
    get:
      summary: Get a specific 'Zone' object.
      parameters:
      - name: id
        description: Id of 'Zone' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Zone' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Zone' object.
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Zone'
      tags:
      - zones
    put:
      summary: Update an existing 'Zone' entity.
      parameters:
      - name: id
        description: Id of 'Zone' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Zone' entity.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Zone'
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Zone' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Zone'
      tags:
      - zones
    patch:
      summary: Update a single property on a specific 'Zone' object.
      parameters:
      - name: id
        description: Id of 'Zone' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/Zone'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Zone' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/Zone'
      tags:
      - zones
    delete:
      summary: Delete a 'Zone' object.
      parameters:
      - name: id
        description: Id of 'Zone' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Zone' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Zone' entity was successfully deleted."
      tags:
      - zones
servers:
- url: http://localhost:8080/
